[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "#Load Libraries\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(vroom)\n\n#> \n#> Attaching package: 'vroom'\n#> \n#> The following objects are masked from 'package:readr':\n#> \n#>     as.col_spec, col_character, col_date, col_datetime, col_double,\n#>     col_factor, col_guess, col_integer, col_logical, col_number,\n#>     col_skip, col_time, cols, cols_condense, cols_only, date_names,\n#>     date_names_lang, date_names_langs, default_locale, fwf_cols,\n#>     fwf_empty, fwf_positions, fwf_widths, locale, output_column,\n#>     problems, spec\n\nlibrary(data.table)\n\n#> \n#> Attaching package: 'data.table'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#>     yday, year\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     between, first, last\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     transpose\n\nlibrary(tictoc)\n\n#> \n#> Attaching package: 'tictoc'\n#> \n#> The following object is masked from 'package:data.table':\n#> \n#>     shift\n\nlibrary(dplyr)\nlibrary(readxl)\n\n\n1 Define column types for vroom\n\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\n\n\n2 The reduced data set for the year 2014\n\n\n3 Read the data into a tibble\n\npatent_tbl <- vroom(\n  file = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/wrangling/Patent_data_reduced/patent.tsv\", \n  delim = \"\\t\"\n  #col_types = col_types,\n  #na = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Rows: 327014 Columns: 3\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> chr  (1): id\n#> dbl  (1): num_claims\n#> date (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nassignee_tbl <- vroom(\n  file = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/wrangling/Patent_data_reduced/assignee.tsv\", \n  delim = \"\\t\", \n  col_types = col_types,\n  na = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Warning: The following named parsers don't match the column names: number,\n#> country, date, abstract, title, kind, num_claims, filename, withdrawn\n\npatent_assignee_tbl <- vroom(\n  file = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/wrangling/Patent_data_reduced/patent_assignee.tsv\", \n  delim = \"\\t\", \n  col_types = col_types,\n  na = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Warning: The following named parsers don't match the column names: id, type,\n#> number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\nuspc_tbl <- vroom(\n  file = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/wrangling/Patent_data_reduced/uspc.tsv\", \n  delim = \"\\t\", \n  col_types = col_types,\n  na = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Warning: The following named parsers don't match the column names: id, type,\n#> number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\n\n#Joining the tables\n\npatent_joined_table <- patent_assignee_tbl %>%\n  inner_join(assignee_tbl, by = c(\"assignee_id\" = \"id\")) %>%\n  inner_join(patent_tbl, by = c(\"patent_id\" = \"id\"))\n\n#What US company/corporation has the most patents? List the 10 US companies with the most assigned/granted patents.\n\nus_patent_counts <- patent_joined_table %>%\n  group_by(organization) %>%\n  summarise(total_patents = n()) %>%\n  arrange(desc(total_patents))\n\ntop_10_us_companies <- head(us_patent_counts, 10)\n\ntop_10_us_companies\n\n\n\n  \n\n\n\n#What US organization had the most patents granted in August 2014? List the top 10 companies with the most new granted patents for August 2014.\n\nus_patent_counts_aug_2014 <- patent_joined_table %>%\n  filter(format(date, \"%Y-%m\") == \"2014-08\") %>%\n  group_by(organization) %>%\n  summarise(total_patents = n()) %>%\n  arrange(desc(total_patents)) %>%\n  select(organization, total_patents)\n\ntop_10_us_companies_aug_2014 <- head(us_patent_counts_aug_2014, 10)\n\ntop_10_us_companies_aug_2014"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n#Load Libraries\n#Map the time course of the cumulative Covid-19 cases!\n#Filter the data\n#Create the line plot with the cumulative cases over time"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Add a language to syntax highlight code blocks: #Load Libraries\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tibble)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(magrittr)\n\n#> \n#> Attaching package: 'magrittr'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     set_names\n#> \n#> The following object is masked from 'package:tidyr':\n#> \n#>     extract\n\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\n\n#reading the data\n\nbikes_tbl  <-  read_excel(path = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/ds_assets/bikes.xlsx\")\norderlines_tbl   <-  read_excel(path = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/ds_assets/orderlines.xlsx\")\n\n#> New names:\n#> • `` -> `...1`\n\nbikeshops_tbl   <-   read_excel(path = \"C:/Users/srajs/OneDrive/Desktop/Business/ss23-bdsb-Nandan31/assets/ds_assets/bikeshops.xlsx\")\n\n#Join the tables\n\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl   <-   orderlines_tbl   %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\"))  %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n#city name from location\n\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>% \n separate(col = location,\n           into = c(\"city\",\"state\"),\n           sep = \", \",\n           convert = T) %>%\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %>%\n  \n  \n  mutate(total_price = price * quantity)\n\n#Finding out which state has the highest revenue and plotting the graph (North Rhine-Westphalia)\n\nsales_by_location_tbl  <-  bike_orderlines_wrangled_tbl %>%\n  select(state, total_price) %>%\n  group_by(state) %>%\n  summarize(sales = sum(total_price)) %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \"€\"))\n\n\n#glimpse(sales_by_location_tbl)\n\n\nsales_by_location_tbl %>%\n  ggplot(aes(x = state, y = sales)) +\n  \n  geom_col(fill = \"#2DC6D6\") +\n  geom_label(aes(label = sales_text)) +\n  #geom_smooth(method = \"lm\", se = FALSE)+\n  scale_y_continuous( labels = scales::dollar_format(big.mark = \".\",\n                                                     decimal.mark = \",\",\n                                                     prefix = \"\",\n                                                     suffix = \" €\")) +\n  \n  labs(\n    title = \"Revenue by Location(State)\",\n    subtitle = \"Trend\", #North Rhine-Westphalia state has the highest revenue\n    x = \"\",\n    y = \"Revenue\"\n  ) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n#Analyzing the sales by location and year by using facet_wrap\n\nsales_by_location_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(state, total_price, category.1) %>%\n  group_by(state, category.1) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\n#sales_by_location_cat_1_tbl\nsales_by_location_cat_1_tbl %>%\n  ggplot(aes(x = category.1, y = sales, fill = state)) +\n  geom_col() +\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by category and state\",\n    subtitle = \"Trend in sales of products in each state\",\n    fill = \"State List\"\n  )+ theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "2.1 Header 2",
    "text": "2.1 Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n\n\n#Load Libraries\n\nlibrary(RSQLite)\nlibrary(dplyr)\n\n#> \n#> Attaching package: 'dplyr'\n\n\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n\n\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\nlibrary(httr)\nlibrary(glue)\nlibrary(jsonlite)\nlibrary(keyring)\nlibrary(\"rstudioapi\")\nlibrary(rvest)\n\n#Sending the GET request to the API\n\nresponse <- GET(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood\")\n\n#Checking the status code and print first ten rows of your tibbles\n\nif (response$status_code == 200) {\n  # The request was successful\n  # Get the response data\n  rawToChar(response$content)\n  \n  meals_db <- response %>%\n    .$content %>%\n    rawToChar() %>%\n    fromJSON()\n  #-- Print the first 10 rows of your tibbles\n  head(meals_db)\n} else {\n  # The request failed\n  print(response$status_code)\n}\n\n#> $meals\n#>                                       strMeal\n#> 1         Baked salmon with fennel & tomatoes\n#> 2                     Cajun spiced fish tacos\n#> 3                              Escovitch Fish\n#> 4                                  Fish fofos\n#> 5                                    Fish pie\n#> 6                      Fish Stew with Rouille\n#> 7                            Garides Saganaki\n#> 8                 Grilled Portuguese sardines\n#> 9                       Honey Teriyaki Salmon\n#> 10                                   Kedgeree\n#> 11                             Kung Po Prawns\n#> 12                   Laksa King Prawn Noodles\n#> 13                  Mediterranean Pasta Salad\n#> 14                           Mee goreng mamak\n#> 15                                 Nasi lemak\n#> 16 Portuguese fish stew (Caldeirada de peixe)\n#> 17                       Recheado Masala Fish\n#> 18                       Salmon Avocado Salad\n#> 19                       Salmon Prawn Risotto\n#> 20                         Saltfish and Ackee\n#> 21                             Seafood fideuà\n#> 22                            Shrimp Chow Fun\n#> 23            Sledz w Oleju (Polish Herrings)\n#> 24           Spring onion and prawn empanadas\n#> 25                                      Sushi\n#> 26                             Three Fish Pie\n#> 27                         Tuna and Egg Briks\n#> 28                               Tuna Nicoise\n#>                                                         strMealThumb idMeal\n#> 1        https://www.themealdb.com/images/media/meals/1548772327.jpg  52959\n#> 2  https://www.themealdb.com/images/media/meals/uvuyxu1503067369.jpg  52819\n#> 3        https://www.themealdb.com/images/media/meals/1520084413.jpg  52944\n#> 4  https://www.themealdb.com/images/media/meals/a15wsa1614349126.jpg  53043\n#> 5  https://www.themealdb.com/images/media/meals/ysxwuq1487323065.jpg  52802\n#> 6  https://www.themealdb.com/images/media/meals/vptqpw1511798500.jpg  52918\n#> 7  https://www.themealdb.com/images/media/meals/wuvryu1468232995.jpg  52764\n#> 8  https://www.themealdb.com/images/media/meals/lpd4wy1614347943.jpg  53041\n#> 9  https://www.themealdb.com/images/media/meals/xxyupu1468262513.jpg  52773\n#> 10 https://www.themealdb.com/images/media/meals/utxqpt1511639216.jpg  52887\n#> 11       https://www.themealdb.com/images/media/meals/1525873040.jpg  52946\n#> 12 https://www.themealdb.com/images/media/meals/rvypwy1503069308.jpg  52821\n#> 13 https://www.themealdb.com/images/media/meals/wvqpwt1468339226.jpg  52777\n#> 14 https://www.themealdb.com/images/media/meals/xquakq1619787532.jpg  53048\n#> 15 https://www.themealdb.com/images/media/meals/wai9bw1619788844.jpg  53051\n#> 16 https://www.themealdb.com/images/media/meals/do7zps1614349775.jpg  53045\n#> 17 https://www.themealdb.com/images/media/meals/uwxusv1487344500.jpg  52809\n#> 18       https://www.themealdb.com/images/media/meals/1549542994.jpg  52960\n#> 19 https://www.themealdb.com/images/media/meals/xxrxux1503070723.jpg  52823\n#> 20 https://www.themealdb.com/images/media/meals/vytypy1511883765.jpg  52936\n#> 21 https://www.themealdb.com/images/media/meals/wqqvyq1511179730.jpg  52836\n#> 22       https://www.themealdb.com/images/media/meals/1529445434.jpg  52953\n#> 23 https://www.themealdb.com/images/media/meals/7ttta31593350374.jpg  53023\n#> 24 https://www.themealdb.com/images/media/meals/1c5oso1614347493.jpg  53040\n#> 25 https://www.themealdb.com/images/media/meals/g046bb1663960946.jpg  53065\n#> 26 https://www.themealdb.com/images/media/meals/spswqs1511558697.jpg  52882\n#> 27 https://www.themealdb.com/images/media/meals/2dsltq1560461468.jpg  52975\n#> 28 https://www.themealdb.com/images/media/meals/yypwwq1511304979.jpg  52852\n\n\n#Scrape one of the competitor websites of canyon and create a small database.\n\n# Set the URL of the website to scrape\nurl <- \"https://www.rosebikes.de/\"\n\n# Scrape the website\nhtml <- read_html(url)\n\n# Find the elements that contain the model names\nmodel_names <- html %>%\n  html_nodes(\".products-slider-tile__product-name\") %>%\n  html_text()\n\n# Find the elements that contain the prices\nprices <- html %>%\n  html_nodes(\".product-tile-price__current-value\") %>%\n  html_text()\n\n# Extract the number using regular expressions\nprice <- gsub(\"[^0-9.,]\", \"\", prices)  # Remove all non-digit, non-decimal, and non-comma characters\n\n# Create a data frame of the model names and prices\ndatabase <- data.frame(\n  Model = model_names,\n  Price = price\n)\n\n# Print the data frame\nprint(database)\n\n#>                                                    Model    Price\n#> 1                                       XLITE 04 Ultegra 3.299,00\n#> 2                                       XLITE 06 Ultegra 3.999,00\n#> 3                                BACKROAD GRX RX810 1x11 2.999,00\n#> 4                                           COUNT SOLO 2   849,00\n#> 5                                            THE BRUCE 2 1.199,00\n#> 6                                  BACKROAD AL GRX RX400 1.999,00\n#> 7                                             SNEAK PLUS 2.399,00\n#> 8                                          ROOT MILLER 1 2.299,00\n#> 9                                        PRO SL DISC 105 1.699,00\n#> 10             BACKROAD Force eTap AXS XPLR 1x12 Limited 4.899,00\n#> 11                                         THRILL HILL 3 3.999,00\n#> 12                            BACKROAD AL GRX RX600 1X11 2.349,00\n#> 13                                   MAYOR PLUS 3 Unisex 4.999,00\n#> 14                             BACKROAD AXS MULLET BUILD 3.999,00\n#> 15                Kettenverschleißlehre mit Kettenhalter     5,45\n#> 16                                   P-BOUNCE Bikeshorts    79,95\n#> 17                              Industrielager 61902-2RS    14,95\n#> 18                            ITAMOS 2 Fahrradhandschuhe    20,95\n#> 19                  SV 42 & 60 28\" Wide Rennrad Schlauch     2,95\n#> 20                          FH-S Halter für Apple AirTag     5,95\n#> 21                          SCORPIONE 3 JERSEY Radtrikot    69,95\n#> 22                        Strada E-Bike XL Fahrradträger   439,95\n#> 23                                 VALDES MTB Bikeshorts    84,95\n#> 24                 Multi Cage CF-1 Flaschenhalter Carbon    11,95\n#> 25                   NECK BRACE DBX 3.5 Nackenprotektor    221,95\n#> 26                                  Fly Tex Trinkflasche     5,95\n#> 27              AIRFLEX CHEST PROTECTOR Protektorenweste   145,95\n#> 28 Grand Prix 5000 Rennradreifen, Faltreifen (Tube-Type)    34,95\n#> 29       Shock Blow - Dämpferpumpe und Federgabelpumpe -    19,95"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#visualize-the-distribution-of-the-mortality-rate-deaths-population",
    "href": "content/01_journal/04_data_visualization.html#visualize-the-distribution-of-the-mortality-rate-deaths-population",
    "title": "Data Visualization",
    "section": "0.1 Visualize the distribution of the mortality rate (deaths / population)",
    "text": "0.1 Visualize the distribution of the mortality rate (deaths / population)"
  }
]